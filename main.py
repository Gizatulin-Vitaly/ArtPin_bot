from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
import asyncio
from datetime import datetime, timedelta

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = ''

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_selections = {}
user_last_interaction = {}
INACTIVITY_LIMIT = timedelta(minutes=5)

# –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
recipients = {
    '1': '',  # ID —á–∞—Ç–∞ –¥–ª—è –±—Ä–æ—à–µ–π, —á–æ–∫–µ—Ä–æ–≤ –∏ –±—É—Å
    '2': '',  # ID —á–∞—Ç–∞ –¥–ª—è –∂–≥—É—Ç–æ–≤ –∏ –±—Ä–∞—Å–ª–µ—Ç–æ–≤
    '3': '',  # ID —á–∞—Ç–∞ –¥–ª—è –∫—Ä—É–∂–µ–∫ –∏ –∏–∑–¥–µ–ª–∏–π –∏–∑ –ø–æ–ª–∏–º–µ—Ä–Ω–æ–π –≥–ª–∏–Ω—ã
}

# –û–ø–∏—Å–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–±–æ—Ä–∞
option_descriptions = {
    '1': "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ",
    '2': "–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ"
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /command1 (–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)
async def command1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /command2 (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Telegram –∫–∞–Ω–∞–ª)
async def command2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    channel_link = "https://t.me/art_pin_ekb"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∫–∞–Ω–∞–ª
    await update.message.reply_text(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –ø–æ —Å—Å—ã–ª–∫–µ: {channel_link}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /command3 (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ)
async def command3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    info_message = (
        "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤. \n\n"
        "–ê–≤—Ç–æ—Ä: –ì–∏–∑–∞—Ç—É–ª–∏–Ω –í–∏—Ç–∞–ª–∏–π.\n"
        "–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ email: my@vgmail.ru"
    )
    await update.message.reply_text(info_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='action_show_buttons')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text("–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–∫–∞–∑—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                    reply_markup=reply_markup)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    user_id = update.effective_user.id
    user_last_interaction[user_id] = datetime.now()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    user = update.effective_user
    user_name = user.first_name
    user_id = user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    user_last_interaction[user_id] = datetime.now()

    try:
        if query.data == 'action_show_buttons':
            keyboard = [
                [InlineKeyboardButton("üèµ –ë—Ä–æ—à—å, —á–æ–∫–µ—Ä, –±—É—Å—ã", callback_data='item_1')],
                [InlineKeyboardButton("üìø –ñ–≥—É—Ç, –±—Ä–∞—Å–ª–µ—Ç", callback_data='item_2')],
                [InlineKeyboardButton("üåº –ö—Ä—É–∂–∫—É, –∏–∑–¥–µ–ª–∏–µ –∏–∑ –ø–æ–ª–∏–º–µ—Ä–Ω–æ–π –≥–ª–∏–Ω—ã", callback_data='item_3')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text="–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=reply_markup)

        elif query.data.startswith('item_'):
            item_id = query.data.split('_')[1]
            user_selections[user_id] = {'item_id': item_id}

            item_map = {
                '1': "üèµ –±—Ä–æ—à—å, —á–æ–∫–µ—Ä –∏–ª–∏ –±—É—Å—ã",
                '2': "üìø –∂–≥—É—Ç –∏–ª–∏ –±—Ä–∞—Å–ª–µ—Ç",
                '3': "üåº –∫—Ä—É–∂–∫—É –∏–ª–∏ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –ø–æ–ª–∏–º–µ—Ä–Ω–æ–π –≥–ª–∏–Ω—ã"
            }

            item_name = item_map.get(item_id, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')

            keyboard = [
                [InlineKeyboardButton("–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ", callback_data=f'confirm_{item_id}_1')],
                [InlineKeyboardButton("–•–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–µ", callback_data=f'confirm_{item_id}_2')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='action_show_buttons')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ {item_name}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:",
                                          reply_markup=reply_markup)

        elif query.data.startswith('confirm_'):
            item_id, number = query.data.split('_')[1], query.data.split('_')[2]
            if user_id in user_selections:
                user_selections[user_id]['number'] = number

            item_map = {
                '1': "üèµ –±—Ä–æ—à—å, —á–æ–∫–µ—Ä –∏–ª–∏ –±—É—Å—ã",
                '2': "üìø –∂–≥—É—Ç –∏–ª–∏ –±—Ä–∞—Å–ª–µ—Ç",
                '3': "üåº –∫—Ä—É–∂–∫—É –∏–ª–∏ –∏–∑–¥–µ–ª–∏–µ –∏–∑ –ø–æ–ª–∏–º–µ—Ä–Ω–æ–π –≥–ª–∏–Ω—ã"
            }

            item_name = item_map.get(user_selections[user_id]['item_id'], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä')
            option_description = option_descriptions.get(number, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç')
            recipient_id = recipients.get(user_selections[user_id]['item_id'], 'default_recipient_id')

            if recipient_id == 'default_recipient_id':
                await query.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            final_message = (f"{user_name} —Ö–æ—á–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å {item_name}. –í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {option_description}."
                             f" –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: https://t.me/{user.username}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                await context.bot.send_message(chat_id=recipient_id, text=final_message)
            except Exception as e:
                logger.error(f"Failed to send message: {e}")

            await query.edit_message_text(text="–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —É—á—Ç–µ–Ω—ã! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

            # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_selections.pop(user_id, None)

        elif query.data == 'back_to_main':
            await start(update, context)

    except Exception as e:
        logger.error(f"Error processing callback: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    user_last_interaction[user_id] = datetime.now()

    if user_id not in user_selections:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.")
        await start(update, context)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_inactivity(context: ContextTypes.DEFAULT_TYPE):
    while True:
        now = datetime.now()
        to_remove = []
        for user_id, last_interaction in user_last_interaction.items():
            if now - last_interaction > INACTIVITY_LIMIT:
                try:
                    await context.bot.send_message(chat_id=user_id, text="–í—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã —É–∂–µ 5 –º–∏–Ω—É—Ç."
                                                                         " –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É."
                                                                         " –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ!")
                except Exception as e:
                    logger.error(f"Failed to send inactivity message: {e}")
                to_remove.append(user_id)

        for user_id in to_remove:
            user_last_interaction.pop(user_id, None)

        await asyncio.sleep(60)  # –°–ø–µ—Ä–≤–∞ –∂–¥–µ–º 60 —Å–µ–∫—É–Ω–¥, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("restart", command1))
    application.add_handler(CommandHandler("channel", command2))
    application.add_handler(CommandHandler("about", command3))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
    application.job_queue.run_repeating(check_inactivity, interval=60, first=0)

    application.run_polling()


if __name__ == '__main__':
    main()
